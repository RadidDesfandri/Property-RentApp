// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  TWITTER
  FACEBOOK
  CREDENTIAL
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  username    String?       @unique
  phone       String?
  password    String?
  isVerify    Boolean       @default(false)
  provider    Provider      @default(CREDENTIAL)
  avatar      String?
  role        String        @default("user")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  Review      Review[]
  Reservation Reservation[]
}

model Tenant {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String?    @unique
  phone     String?
  password  String?
  isVerify  Boolean    @default(false)
  provider  Provider   @default(CREDENTIAL)
  avatar    String?
  role      String     @default("tenant")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  Property  Property[]
  Room      Room[]
}

enum Category {
  Hotel
  Villa
}

model Property {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String        @db.LongText()
  category    Category
  thumbnail   String
  location    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  tenant_Id   Int
  tenant      Tenant        @relation(fields: [tenant_Id], references: [id])
  PropertyPic PropertyPic[]
  Room        Room[]
  Review      Review[]
}

model PropertyPic {
  id          Int      @id @default(autoincrement())
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  property_Id Int
  property    Property @relation(fields: [property_Id], references: [id])
}

enum Type {
  Deluxe
  Standard
  Suite
}

model Room {
  id          Int           @id @default(autoincrement())
  type        Type          @default(Standard)
  price       Float
  capacity    Int           @default(1)
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  property_Id Int
  tenant_Id   Int
  tenant      Tenant        @relation(fields: [tenant_Id], references: [id])
  property    Property      @relation(fields: [property_Id], references: [id])
  RoomPic     RoomPic[]
  Review      Review[]
  Reservation Reservation[]
}

model RoomPic {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  room_Id   Int
  room      Room     @relation(fields: [room_Id], references: [id])
}

enum StatusRes {
  PENDING
  CONFIRMATION
  PAID
  CANCEL
}

model Reservation {
  id           Int       @id @default(autoincrement())
  price        Float
  startDate    DateTime
  endDate      DateTime
  paymentProof String?
  paymentLink  String?
  statusRes    StatusRes @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt()
  Review       Review?
  user_Id      Int
  room_Id      Int
  room         Room      @relation(fields: [room_Id], references: [id])
  user         User      @relation(fields: [user_Id], references: [id])
}

model Review {
  id             Int         @id @default(autoincrement())
  content        String      @db.LongText()
  ratings        String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt()
  user_Id        Int
  room_Id        Int
  property_Id    Int
  reservation_Id Int         @unique
  user           User        @relation(fields: [user_Id], references: [id])
  room           Room        @relation(fields: [room_Id], references: [id])
  property       Property    @relation(fields: [property_Id], references: [id])
  reservation    Reservation @relation(fields: [reservation_Id], references: [id])
}
