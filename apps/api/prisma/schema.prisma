// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  TWITTER
  GITHUB
  CREDENTIAL
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  username    String?       @unique
  phone       String?
  password    String?
  isVerify    Boolean       @default(false)
  otp         String?
  otpExpired  DateTime?
  provider    Provider      @default(CREDENTIAL)
  avatar      String?
  role        String        @default("user")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  Review      Review[]
  Reservation Reservation[]
}

model Tenant {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  email      String     @unique
  username   String?    @unique
  phone      String?
  password   String?
  isVerify   Boolean    @default(false)
  otp        String?
  otpExpired DateTime?
  provider   Provider   @default(CREDENTIAL)
  avatar     String?
  role       String     @default("tenant")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()
  Property   Property[]
  Room       Room[]
}

enum Category {
  Hotel
  Villa
}

model Property {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String       
  category    Category
  thumbnail   String
  location    String
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  tenant_Id   String        @db.ObjectId
  tenant      Tenant        @relation(fields: [tenant_Id], references: [id])
  PropertyPic PropertyPic[]
  Room        Room[]
}

model PropertyPic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  property_Id String   @db.ObjectId
  property    Property @relation(fields: [property_Id], references: [id])
}

enum Type {
  Deluxe
  Standard
  Suite
}

model Room {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  type             Type               @default(Standard)
  price            Float
  capacity         Int                @default(1)
  description      String
  pricediscount    Float
  availability     Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  property_Id      String             @db.ObjectId
  tenant_Id        String             @db.ObjectId
  tenant           Tenant             @relation(fields: [tenant_Id], references: [id])
  property         Property           @relation(fields: [property_Id], references: [id])
  facility         Facility[]
  RoomPic          RoomPic[]
  Review           Review[]
  Reservation      Reservation[]
  RoomAvailability RoomAvailability[]
}

model Facility {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  roomId String? @db.ObjectId
  Room   Room?   @relation(fields: [roomId], references: [id])
}

model RoomPic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  room_Id   String   @db.ObjectId
  room      Room     @relation(fields: [room_Id], references: [id])
}

model RoomAvailability {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  isAvailable     Boolean  @default(true)
  priceAdjustment Float?
  room_Id         String   @db.ObjectId
  room            Room     @relation(fields: [room_Id], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}

enum StatusRes {
  PENDING
  CONFIRMATION
  PAID
  CANCEL
}

enum Method {
  VA
  TF
}

model Reservation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  price        Float
  startDate    DateTime
  guest        Int       @default(1)
  endDate      DateTime
  method       Method    @default(VA)
  paymentProof String?
  paymentLink  String?
  statusRes    StatusRes @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt()
  Review       Review?
  user_Id      String    @db.ObjectId
  room_Id      String    @db.ObjectId
  room         Room      @relation(fields: [room_Id], references: [id])
  user         User      @relation(fields: [user_Id], references: [id])
}

model Review {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  ratings        String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt()
  feedBack       String?
  user_Id        String      @db.ObjectId
  room_Id        String      @db.ObjectId
  reservation_Id String      @unique @db.ObjectId
  user           User        @relation(fields: [user_Id], references: [id])
  room           Room        @relation(fields: [room_Id], references: [id])
  reservation    Reservation @relation(fields: [reservation_Id], references: [id])
}
